enum Preset {
    "Bw",
    "Poster",
    "Photo",
};

enum ColorMode {
    "Color",
    "Binary",
};

enum Hierarchical {
    "Stacked",
    "Cutout",
};

enum PathSimplifyMode {
    "None",
    "Polygon",
    "Spline",
};


/// Converter config
dictionary Config {
    ColorMode color_mode;
    Hierarchical hierarchical;
    u32 filter_speckle;
    i32 color_precision;
    i32 layer_difference;
    PathSimplifyMode mode;
    i32 corner_threshold;
    f64 length_threshold;
    u32 max_iterations;
    i32 splice_threshold;
    u32? path_precision;
};

dictionary PointF64 {
    f64 x;
    f64 y;
};

dictionary PointI32 {
    i32 x;
    i32 y;
};

dictionary Color {
    u8 r;
    u8 g;
    u8 b;
    u8 a;
};

dictionary PathF64 {
    sequence<PointF64> path;
};

dictionary PathI32 {
    sequence<PointI32> path;
};

dictionary Spline {
    sequence<PointF64> points;
};

[Enum]
interface LCompoundPathElement {
    PathI32(PathI32 path);
    PathF64(PathF64 path);
    Spline(Spline spline);
};

dictionary LCompoundPath {
    sequence<LCompoundPathElement> paths;
};

dictionary LSvgPath {
    LCompoundPath path;
    Color color;
};

dictionary LSvgFile {
    sequence<LSvgPath> paths;
    u32 width;
    u32 height;
    u32? path_precision;
};

[Error]
enum SvgError {
    "ConversionError",
};

namespace vtracerlib {
    [Throws=SvgError]
    LSvgFile convert_image_to_svg_with_preset(Preset preset, bytes image_data, u32 width, u32 height);

    [Throws=SvgError]
    LSvgFile convert_image_to_svg(Config config, bytes image_data, u32 width, u32 height);

    string make_svg_string(LSvgFile svg_file);
};
