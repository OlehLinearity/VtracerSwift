// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(vtracerlibFFI)
import vtracerlibFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_vtracer_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_vtracer_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


public struct Color {
    public var r: UInt8
    public var g: UInt8
    public var b: UInt8
    public var a: UInt8

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        r: UInt8, 
        g: UInt8, 
        b: UInt8, 
        a: UInt8) {
        self.r = r
        self.g = g
        self.b = b
        self.a = a
    }
}


extension Color: Equatable, Hashable {
    public static func ==(lhs: Color, rhs: Color) -> Bool {
        if lhs.r != rhs.r {
            return false
        }
        if lhs.g != rhs.g {
            return false
        }
        if lhs.b != rhs.b {
            return false
        }
        if lhs.a != rhs.a {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(r)
        hasher.combine(g)
        hasher.combine(b)
        hasher.combine(a)
    }
}


public struct FfiConverterTypeColor: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Color {
        return
            try Color(
                r: FfiConverterUInt8.read(from: &buf), 
                g: FfiConverterUInt8.read(from: &buf), 
                b: FfiConverterUInt8.read(from: &buf), 
                a: FfiConverterUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: Color, into buf: inout [UInt8]) {
        FfiConverterUInt8.write(value.r, into: &buf)
        FfiConverterUInt8.write(value.g, into: &buf)
        FfiConverterUInt8.write(value.b, into: &buf)
        FfiConverterUInt8.write(value.a, into: &buf)
    }
}


public func FfiConverterTypeColor_lift(_ buf: RustBuffer) throws -> Color {
    return try FfiConverterTypeColor.lift(buf)
}

public func FfiConverterTypeColor_lower(_ value: Color) -> RustBuffer {
    return FfiConverterTypeColor.lower(value)
}


public struct LCompoundPath {
    public var paths: [PathF64]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        paths: [PathF64]) {
        self.paths = paths
    }
}


extension LCompoundPath: Equatable, Hashable {
    public static func ==(lhs: LCompoundPath, rhs: LCompoundPath) -> Bool {
        if lhs.paths != rhs.paths {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(paths)
    }
}


public struct FfiConverterTypeLCompoundPath: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LCompoundPath {
        return
            try LCompoundPath(
                paths: FfiConverterSequenceTypePathF64.read(from: &buf)
        )
    }

    public static func write(_ value: LCompoundPath, into buf: inout [UInt8]) {
        FfiConverterSequenceTypePathF64.write(value.paths, into: &buf)
    }
}


public func FfiConverterTypeLCompoundPath_lift(_ buf: RustBuffer) throws -> LCompoundPath {
    return try FfiConverterTypeLCompoundPath.lift(buf)
}

public func FfiConverterTypeLCompoundPath_lower(_ value: LCompoundPath) -> RustBuffer {
    return FfiConverterTypeLCompoundPath.lower(value)
}


public struct LSvgFile {
    public var paths: [LSvgPath]
    public var width: UInt32
    public var height: UInt32
    public var pathPrecision: UInt32?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        paths: [LSvgPath], 
        width: UInt32, 
        height: UInt32, 
        pathPrecision: UInt32?) {
        self.paths = paths
        self.width = width
        self.height = height
        self.pathPrecision = pathPrecision
    }
}


extension LSvgFile: Equatable, Hashable {
    public static func ==(lhs: LSvgFile, rhs: LSvgFile) -> Bool {
        if lhs.paths != rhs.paths {
            return false
        }
        if lhs.width != rhs.width {
            return false
        }
        if lhs.height != rhs.height {
            return false
        }
        if lhs.pathPrecision != rhs.pathPrecision {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(paths)
        hasher.combine(width)
        hasher.combine(height)
        hasher.combine(pathPrecision)
    }
}


public struct FfiConverterTypeLSvgFile: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LSvgFile {
        return
            try LSvgFile(
                paths: FfiConverterSequenceTypeLSvgPath.read(from: &buf), 
                width: FfiConverterUInt32.read(from: &buf), 
                height: FfiConverterUInt32.read(from: &buf), 
                pathPrecision: FfiConverterOptionUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: LSvgFile, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeLSvgPath.write(value.paths, into: &buf)
        FfiConverterUInt32.write(value.width, into: &buf)
        FfiConverterUInt32.write(value.height, into: &buf)
        FfiConverterOptionUInt32.write(value.pathPrecision, into: &buf)
    }
}


public func FfiConverterTypeLSvgFile_lift(_ buf: RustBuffer) throws -> LSvgFile {
    return try FfiConverterTypeLSvgFile.lift(buf)
}

public func FfiConverterTypeLSvgFile_lower(_ value: LSvgFile) -> RustBuffer {
    return FfiConverterTypeLSvgFile.lower(value)
}


public struct LSvgPath {
    public var path: LCompoundPath
    public var color: Color

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        path: LCompoundPath, 
        color: Color) {
        self.path = path
        self.color = color
    }
}


extension LSvgPath: Equatable, Hashable {
    public static func ==(lhs: LSvgPath, rhs: LSvgPath) -> Bool {
        if lhs.path != rhs.path {
            return false
        }
        if lhs.color != rhs.color {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(path)
        hasher.combine(color)
    }
}


public struct FfiConverterTypeLSvgPath: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LSvgPath {
        return
            try LSvgPath(
                path: FfiConverterTypeLCompoundPath.read(from: &buf), 
                color: FfiConverterTypeColor.read(from: &buf)
        )
    }

    public static func write(_ value: LSvgPath, into buf: inout [UInt8]) {
        FfiConverterTypeLCompoundPath.write(value.path, into: &buf)
        FfiConverterTypeColor.write(value.color, into: &buf)
    }
}


public func FfiConverterTypeLSvgPath_lift(_ buf: RustBuffer) throws -> LSvgPath {
    return try FfiConverterTypeLSvgPath.lift(buf)
}

public func FfiConverterTypeLSvgPath_lower(_ value: LSvgPath) -> RustBuffer {
    return FfiConverterTypeLSvgPath.lower(value)
}


public struct PathF64 {
    public var path: [PointF64]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        path: [PointF64]) {
        self.path = path
    }
}


extension PathF64: Equatable, Hashable {
    public static func ==(lhs: PathF64, rhs: PathF64) -> Bool {
        if lhs.path != rhs.path {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(path)
    }
}


public struct FfiConverterTypePathF64: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PathF64 {
        return
            try PathF64(
                path: FfiConverterSequenceTypePointF64.read(from: &buf)
        )
    }

    public static func write(_ value: PathF64, into buf: inout [UInt8]) {
        FfiConverterSequenceTypePointF64.write(value.path, into: &buf)
    }
}


public func FfiConverterTypePathF64_lift(_ buf: RustBuffer) throws -> PathF64 {
    return try FfiConverterTypePathF64.lift(buf)
}

public func FfiConverterTypePathF64_lower(_ value: PathF64) -> RustBuffer {
    return FfiConverterTypePathF64.lower(value)
}


public struct PointF64 {
    public var x: Double
    public var y: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        x: Double, 
        y: Double) {
        self.x = x
        self.y = y
    }
}


extension PointF64: Equatable, Hashable {
    public static func ==(lhs: PointF64, rhs: PointF64) -> Bool {
        if lhs.x != rhs.x {
            return false
        }
        if lhs.y != rhs.y {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(x)
        hasher.combine(y)
    }
}


public struct FfiConverterTypePointF64: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PointF64 {
        return
            try PointF64(
                x: FfiConverterDouble.read(from: &buf), 
                y: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: PointF64, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.x, into: &buf)
        FfiConverterDouble.write(value.y, into: &buf)
    }
}


public func FfiConverterTypePointF64_lift(_ buf: RustBuffer) throws -> PointF64 {
    return try FfiConverterTypePointF64.lift(buf)
}

public func FfiConverterTypePointF64_lower(_ value: PointF64) -> RustBuffer {
    return FfiConverterTypePointF64.lower(value)
}


public struct PointI32 {
    public var x: Int32
    public var y: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        x: Int32, 
        y: Int32) {
        self.x = x
        self.y = y
    }
}


extension PointI32: Equatable, Hashable {
    public static func ==(lhs: PointI32, rhs: PointI32) -> Bool {
        if lhs.x != rhs.x {
            return false
        }
        if lhs.y != rhs.y {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(x)
        hasher.combine(y)
    }
}


public struct FfiConverterTypePointI32: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PointI32 {
        return
            try PointI32(
                x: FfiConverterInt32.read(from: &buf), 
                y: FfiConverterInt32.read(from: &buf)
        )
    }

    public static func write(_ value: PointI32, into buf: inout [UInt8]) {
        FfiConverterInt32.write(value.x, into: &buf)
        FfiConverterInt32.write(value.y, into: &buf)
    }
}


public func FfiConverterTypePointI32_lift(_ buf: RustBuffer) throws -> PointI32 {
    return try FfiConverterTypePointI32.lift(buf)
}

public func FfiConverterTypePointI32_lower(_ value: PointI32) -> RustBuffer {
    return FfiConverterTypePointI32.lower(value)
}


public enum SvgError {

    
    
    case ConversionError(message: String)
    

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeSvgError.lift(error)
    }
}


public struct FfiConverterTypeSvgError: FfiConverterRustBuffer {
    typealias SwiftType = SvgError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SvgError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ConversionError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SvgError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .ConversionError(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))

        
        }
    }
}


extension SvgError: Equatable, Hashable {}

extension SvgError: Error { }

fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeLSvgPath: FfiConverterRustBuffer {
    typealias SwiftType = [LSvgPath]

    public static func write(_ value: [LSvgPath], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLSvgPath.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [LSvgPath] {
        let len: Int32 = try readInt(&buf)
        var seq = [LSvgPath]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeLSvgPath.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypePathF64: FfiConverterRustBuffer {
    typealias SwiftType = [PathF64]

    public static func write(_ value: [PathF64], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePathF64.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PathF64] {
        let len: Int32 = try readInt(&buf)
        var seq = [PathF64]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePathF64.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypePointF64: FfiConverterRustBuffer {
    typealias SwiftType = [PointF64]

    public static func write(_ value: [PointF64], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePointF64.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PointF64] {
        let len: Int32 = try readInt(&buf)
        var seq = [PointF64]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePointF64.read(from: &buf))
        }
        return seq
    }
}
public func processImage(imageData: [UInt8], width: UInt32, height: UInt32) throws  -> LSvgFile {
    return try  FfiConverterTypeLSvgFile.lift(
        try rustCallWithError(FfiConverterTypeSvgError.lift) {
    uniffi_vtracer_fn_func_process_image(
        FfiConverterSequenceUInt8.lower(imageData),
        FfiConverterUInt32.lower(width),
        FfiConverterUInt32.lower(height),$0)
}
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_vtracer_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_vtracer_checksum_func_process_image() != 38603) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
