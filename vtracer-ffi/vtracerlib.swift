// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(vtracerlibFFI)
    import vtracerlibFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_vtracer_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_vtracer_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public struct Color {
    public var r: UInt8
    public var g: UInt8
    public var b: UInt8
    public var a: UInt8

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        r: UInt8,
        g: UInt8,
        b: UInt8,
        a: UInt8
    ) {
        self.r = r
        self.g = g
        self.b = b
        self.a = a
    }
}

extension Color: Equatable, Hashable {
    public static func == (lhs: Color, rhs: Color) -> Bool {
        if lhs.r != rhs.r {
            return false
        }
        if lhs.g != rhs.g {
            return false
        }
        if lhs.b != rhs.b {
            return false
        }
        if lhs.a != rhs.a {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(r)
        hasher.combine(g)
        hasher.combine(b)
        hasher.combine(a)
    }
}

public struct FfiConverterTypeColor: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Color {
        return
            try Color(
                r: FfiConverterUInt8.read(from: &buf),
                g: FfiConverterUInt8.read(from: &buf),
                b: FfiConverterUInt8.read(from: &buf),
                a: FfiConverterUInt8.read(from: &buf)
            )
    }

    public static func write(_ value: Color, into buf: inout [UInt8]) {
        FfiConverterUInt8.write(value.r, into: &buf)
        FfiConverterUInt8.write(value.g, into: &buf)
        FfiConverterUInt8.write(value.b, into: &buf)
        FfiConverterUInt8.write(value.a, into: &buf)
    }
}

public func FfiConverterTypeColor_lift(_ buf: RustBuffer) throws -> Color {
    return try FfiConverterTypeColor.lift(buf)
}

public func FfiConverterTypeColor_lower(_ value: Color) -> RustBuffer {
    return FfiConverterTypeColor.lower(value)
}

/**
 * Converter config
 */
public struct Config {
    public var colorMode: ColorMode
    public var hierarchical: Hierarchical
    public var filterSpeckle: UInt32
    public var colorPrecision: Int32
    public var layerDifference: Int32
    public var mode: PathSimplifyMode
    public var cornerThreshold: Int32
    public var lengthThreshold: Double
    public var maxIterations: UInt32
    public var spliceThreshold: Int32
    public var pathPrecision: UInt32?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        colorMode: ColorMode,
        hierarchical: Hierarchical,
        filterSpeckle: UInt32,
        colorPrecision: Int32,
        layerDifference: Int32,
        mode: PathSimplifyMode,
        cornerThreshold: Int32,
        lengthThreshold: Double,
        maxIterations: UInt32,
        spliceThreshold: Int32,
        pathPrecision: UInt32?
    ) {
        self.colorMode = colorMode
        self.hierarchical = hierarchical
        self.filterSpeckle = filterSpeckle
        self.colorPrecision = colorPrecision
        self.layerDifference = layerDifference
        self.mode = mode
        self.cornerThreshold = cornerThreshold
        self.lengthThreshold = lengthThreshold
        self.maxIterations = maxIterations
        self.spliceThreshold = spliceThreshold
        self.pathPrecision = pathPrecision
    }
}

extension Config: Equatable, Hashable {
    public static func == (lhs: Config, rhs: Config) -> Bool {
        if lhs.colorMode != rhs.colorMode {
            return false
        }
        if lhs.hierarchical != rhs.hierarchical {
            return false
        }
        if lhs.filterSpeckle != rhs.filterSpeckle {
            return false
        }
        if lhs.colorPrecision != rhs.colorPrecision {
            return false
        }
        if lhs.layerDifference != rhs.layerDifference {
            return false
        }
        if lhs.mode != rhs.mode {
            return false
        }
        if lhs.cornerThreshold != rhs.cornerThreshold {
            return false
        }
        if lhs.lengthThreshold != rhs.lengthThreshold {
            return false
        }
        if lhs.maxIterations != rhs.maxIterations {
            return false
        }
        if lhs.spliceThreshold != rhs.spliceThreshold {
            return false
        }
        if lhs.pathPrecision != rhs.pathPrecision {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(colorMode)
        hasher.combine(hierarchical)
        hasher.combine(filterSpeckle)
        hasher.combine(colorPrecision)
        hasher.combine(layerDifference)
        hasher.combine(mode)
        hasher.combine(cornerThreshold)
        hasher.combine(lengthThreshold)
        hasher.combine(maxIterations)
        hasher.combine(spliceThreshold)
        hasher.combine(pathPrecision)
    }
}

public struct FfiConverterTypeConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Config {
        return
            try Config(
                colorMode: FfiConverterTypeColorMode.read(from: &buf),
                hierarchical: FfiConverterTypeHierarchical.read(from: &buf),
                filterSpeckle: FfiConverterUInt32.read(from: &buf),
                colorPrecision: FfiConverterInt32.read(from: &buf),
                layerDifference: FfiConverterInt32.read(from: &buf),
                mode: FfiConverterTypePathSimplifyMode.read(from: &buf),
                cornerThreshold: FfiConverterInt32.read(from: &buf),
                lengthThreshold: FfiConverterDouble.read(from: &buf),
                maxIterations: FfiConverterUInt32.read(from: &buf),
                spliceThreshold: FfiConverterInt32.read(from: &buf),
                pathPrecision: FfiConverterOptionUInt32.read(from: &buf)
            )
    }

    public static func write(_ value: Config, into buf: inout [UInt8]) {
        FfiConverterTypeColorMode.write(value.colorMode, into: &buf)
        FfiConverterTypeHierarchical.write(value.hierarchical, into: &buf)
        FfiConverterUInt32.write(value.filterSpeckle, into: &buf)
        FfiConverterInt32.write(value.colorPrecision, into: &buf)
        FfiConverterInt32.write(value.layerDifference, into: &buf)
        FfiConverterTypePathSimplifyMode.write(value.mode, into: &buf)
        FfiConverterInt32.write(value.cornerThreshold, into: &buf)
        FfiConverterDouble.write(value.lengthThreshold, into: &buf)
        FfiConverterUInt32.write(value.maxIterations, into: &buf)
        FfiConverterInt32.write(value.spliceThreshold, into: &buf)
        FfiConverterOptionUInt32.write(value.pathPrecision, into: &buf)
    }
}

public func FfiConverterTypeConfig_lift(_ buf: RustBuffer) throws -> Config {
    return try FfiConverterTypeConfig.lift(buf)
}

public func FfiConverterTypeConfig_lower(_ value: Config) -> RustBuffer {
    return FfiConverterTypeConfig.lower(value)
}

public struct LCompoundPath {
    public var paths: [LCompoundPathElement]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        paths: [LCompoundPathElement])
    {
        self.paths = paths
    }
}

extension LCompoundPath: Equatable, Hashable {
    public static func == (lhs: LCompoundPath, rhs: LCompoundPath) -> Bool {
        if lhs.paths != rhs.paths {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(paths)
    }
}

public struct FfiConverterTypeLCompoundPath: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LCompoundPath {
        return
            try LCompoundPath(
                paths: FfiConverterSequenceTypeLCompoundPathElement.read(from: &buf)
            )
    }

    public static func write(_ value: LCompoundPath, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeLCompoundPathElement.write(value.paths, into: &buf)
    }
}

public func FfiConverterTypeLCompoundPath_lift(_ buf: RustBuffer) throws -> LCompoundPath {
    return try FfiConverterTypeLCompoundPath.lift(buf)
}

public func FfiConverterTypeLCompoundPath_lower(_ value: LCompoundPath) -> RustBuffer {
    return FfiConverterTypeLCompoundPath.lower(value)
}

public struct LSvgFile {
    public var paths: [LSvgPath]
    public var width: UInt32
    public var height: UInt32
    public var pathPrecision: UInt32?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        paths: [LSvgPath],
        width: UInt32,
        height: UInt32,
        pathPrecision: UInt32?
    ) {
        self.paths = paths
        self.width = width
        self.height = height
        self.pathPrecision = pathPrecision
    }
}

extension LSvgFile: Equatable, Hashable {
    public static func == (lhs: LSvgFile, rhs: LSvgFile) -> Bool {
        if lhs.paths != rhs.paths {
            return false
        }
        if lhs.width != rhs.width {
            return false
        }
        if lhs.height != rhs.height {
            return false
        }
        if lhs.pathPrecision != rhs.pathPrecision {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(paths)
        hasher.combine(width)
        hasher.combine(height)
        hasher.combine(pathPrecision)
    }
}

public struct FfiConverterTypeLSvgFile: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LSvgFile {
        return
            try LSvgFile(
                paths: FfiConverterSequenceTypeLSvgPath.read(from: &buf),
                width: FfiConverterUInt32.read(from: &buf),
                height: FfiConverterUInt32.read(from: &buf),
                pathPrecision: FfiConverterOptionUInt32.read(from: &buf)
            )
    }

    public static func write(_ value: LSvgFile, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeLSvgPath.write(value.paths, into: &buf)
        FfiConverterUInt32.write(value.width, into: &buf)
        FfiConverterUInt32.write(value.height, into: &buf)
        FfiConverterOptionUInt32.write(value.pathPrecision, into: &buf)
    }
}

public func FfiConverterTypeLSvgFile_lift(_ buf: RustBuffer) throws -> LSvgFile {
    return try FfiConverterTypeLSvgFile.lift(buf)
}

public func FfiConverterTypeLSvgFile_lower(_ value: LSvgFile) -> RustBuffer {
    return FfiConverterTypeLSvgFile.lower(value)
}

public struct LSvgPath {
    public var path: LCompoundPath
    public var color: Color

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        path: LCompoundPath,
        color: Color
    ) {
        self.path = path
        self.color = color
    }
}

extension LSvgPath: Equatable, Hashable {
    public static func == (lhs: LSvgPath, rhs: LSvgPath) -> Bool {
        if lhs.path != rhs.path {
            return false
        }
        if lhs.color != rhs.color {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(path)
        hasher.combine(color)
    }
}

public struct FfiConverterTypeLSvgPath: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LSvgPath {
        return
            try LSvgPath(
                path: FfiConverterTypeLCompoundPath.read(from: &buf),
                color: FfiConverterTypeColor.read(from: &buf)
            )
    }

    public static func write(_ value: LSvgPath, into buf: inout [UInt8]) {
        FfiConverterTypeLCompoundPath.write(value.path, into: &buf)
        FfiConverterTypeColor.write(value.color, into: &buf)
    }
}

public func FfiConverterTypeLSvgPath_lift(_ buf: RustBuffer) throws -> LSvgPath {
    return try FfiConverterTypeLSvgPath.lift(buf)
}

public func FfiConverterTypeLSvgPath_lower(_ value: LSvgPath) -> RustBuffer {
    return FfiConverterTypeLSvgPath.lower(value)
}

public struct PathF64 {
    public var path: [PointF64]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        path: [PointF64])
    {
        self.path = path
    }
}

extension PathF64: Equatable, Hashable {
    public static func == (lhs: PathF64, rhs: PathF64) -> Bool {
        if lhs.path != rhs.path {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(path)
    }
}

public struct FfiConverterTypePathF64: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PathF64 {
        return
            try PathF64(
                path: FfiConverterSequenceTypePointF64.read(from: &buf)
            )
    }

    public static func write(_ value: PathF64, into buf: inout [UInt8]) {
        FfiConverterSequenceTypePointF64.write(value.path, into: &buf)
    }
}

public func FfiConverterTypePathF64_lift(_ buf: RustBuffer) throws -> PathF64 {
    return try FfiConverterTypePathF64.lift(buf)
}

public func FfiConverterTypePathF64_lower(_ value: PathF64) -> RustBuffer {
    return FfiConverterTypePathF64.lower(value)
}

public struct PathI32 {
    public var path: [PointI32]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        path: [PointI32])
    {
        self.path = path
    }
}

extension PathI32: Equatable, Hashable {
    public static func == (lhs: PathI32, rhs: PathI32) -> Bool {
        if lhs.path != rhs.path {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(path)
    }
}

public struct FfiConverterTypePathI32: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PathI32 {
        return
            try PathI32(
                path: FfiConverterSequenceTypePointI32.read(from: &buf)
            )
    }

    public static func write(_ value: PathI32, into buf: inout [UInt8]) {
        FfiConverterSequenceTypePointI32.write(value.path, into: &buf)
    }
}

public func FfiConverterTypePathI32_lift(_ buf: RustBuffer) throws -> PathI32 {
    return try FfiConverterTypePathI32.lift(buf)
}

public func FfiConverterTypePathI32_lower(_ value: PathI32) -> RustBuffer {
    return FfiConverterTypePathI32.lower(value)
}

public struct PointF64 {
    public var x: Double
    public var y: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        x: Double,
        y: Double
    ) {
        self.x = x
        self.y = y
    }
}

extension PointF64: Equatable, Hashable {
    public static func == (lhs: PointF64, rhs: PointF64) -> Bool {
        if lhs.x != rhs.x {
            return false
        }
        if lhs.y != rhs.y {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(x)
        hasher.combine(y)
    }
}

public struct FfiConverterTypePointF64: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PointF64 {
        return
            try PointF64(
                x: FfiConverterDouble.read(from: &buf),
                y: FfiConverterDouble.read(from: &buf)
            )
    }

    public static func write(_ value: PointF64, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.x, into: &buf)
        FfiConverterDouble.write(value.y, into: &buf)
    }
}

public func FfiConverterTypePointF64_lift(_ buf: RustBuffer) throws -> PointF64 {
    return try FfiConverterTypePointF64.lift(buf)
}

public func FfiConverterTypePointF64_lower(_ value: PointF64) -> RustBuffer {
    return FfiConverterTypePointF64.lower(value)
}

public struct PointI32 {
    public var x: Int32
    public var y: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        x: Int32,
        y: Int32
    ) {
        self.x = x
        self.y = y
    }
}

extension PointI32: Equatable, Hashable {
    public static func == (lhs: PointI32, rhs: PointI32) -> Bool {
        if lhs.x != rhs.x {
            return false
        }
        if lhs.y != rhs.y {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(x)
        hasher.combine(y)
    }
}

public struct FfiConverterTypePointI32: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PointI32 {
        return
            try PointI32(
                x: FfiConverterInt32.read(from: &buf),
                y: FfiConverterInt32.read(from: &buf)
            )
    }

    public static func write(_ value: PointI32, into buf: inout [UInt8]) {
        FfiConverterInt32.write(value.x, into: &buf)
        FfiConverterInt32.write(value.y, into: &buf)
    }
}

public func FfiConverterTypePointI32_lift(_ buf: RustBuffer) throws -> PointI32 {
    return try FfiConverterTypePointI32.lift(buf)
}

public func FfiConverterTypePointI32_lower(_ value: PointI32) -> RustBuffer {
    return FfiConverterTypePointI32.lower(value)
}

public struct Spline {
    public var points: [PointF64]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        points: [PointF64])
    {
        self.points = points
    }
}

extension Spline: Equatable, Hashable {
    public static func == (lhs: Spline, rhs: Spline) -> Bool {
        if lhs.points != rhs.points {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(points)
    }
}

public struct FfiConverterTypeSpline: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Spline {
        return
            try Spline(
                points: FfiConverterSequenceTypePointF64.read(from: &buf)
            )
    }

    public static func write(_ value: Spline, into buf: inout [UInt8]) {
        FfiConverterSequenceTypePointF64.write(value.points, into: &buf)
    }
}

public func FfiConverterTypeSpline_lift(_ buf: RustBuffer) throws -> Spline {
    return try FfiConverterTypeSpline.lift(buf)
}

public func FfiConverterTypeSpline_lower(_ value: Spline) -> RustBuffer {
    return FfiConverterTypeSpline.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ColorMode {
    case color
    case binary
}

public struct FfiConverterTypeColorMode: FfiConverterRustBuffer {
    typealias SwiftType = ColorMode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ColorMode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .color

        case 2: return .binary

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ColorMode, into buf: inout [UInt8]) {
        switch value {
        case .color:
            writeInt(&buf, Int32(1))

        case .binary:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeColorMode_lift(_ buf: RustBuffer) throws -> ColorMode {
    return try FfiConverterTypeColorMode.lift(buf)
}

public func FfiConverterTypeColorMode_lower(_ value: ColorMode) -> RustBuffer {
    return FfiConverterTypeColorMode.lower(value)
}

extension ColorMode: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Hierarchical {
    case stacked
    case cutout
}

public struct FfiConverterTypeHierarchical: FfiConverterRustBuffer {
    typealias SwiftType = Hierarchical

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Hierarchical {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .stacked

        case 2: return .cutout

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Hierarchical, into buf: inout [UInt8]) {
        switch value {
        case .stacked:
            writeInt(&buf, Int32(1))

        case .cutout:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeHierarchical_lift(_ buf: RustBuffer) throws -> Hierarchical {
    return try FfiConverterTypeHierarchical.lift(buf)
}

public func FfiConverterTypeHierarchical_lower(_ value: Hierarchical) -> RustBuffer {
    return FfiConverterTypeHierarchical.lower(value)
}

extension Hierarchical: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum LCompoundPathElement {
    case pathI32(
        path: PathI32
    )
    case pathF64(
        path: PathF64
    )
    case spline(
        spline: Spline
    )
}

public struct FfiConverterTypeLCompoundPathElement: FfiConverterRustBuffer {
    typealias SwiftType = LCompoundPathElement

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LCompoundPathElement {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .pathI32(
                path: FfiConverterTypePathI32.read(from: &buf)
            )

        case 2: return try .pathF64(
                path: FfiConverterTypePathF64.read(from: &buf)
            )

        case 3: return try .spline(
                spline: FfiConverterTypeSpline.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LCompoundPathElement, into buf: inout [UInt8]) {
        switch value {
        case let .pathI32(path):
            writeInt(&buf, Int32(1))
            FfiConverterTypePathI32.write(path, into: &buf)

        case let .pathF64(path):
            writeInt(&buf, Int32(2))
            FfiConverterTypePathF64.write(path, into: &buf)

        case let .spline(spline):
            writeInt(&buf, Int32(3))
            FfiConverterTypeSpline.write(spline, into: &buf)
        }
    }
}

public func FfiConverterTypeLCompoundPathElement_lift(_ buf: RustBuffer) throws -> LCompoundPathElement {
    return try FfiConverterTypeLCompoundPathElement.lift(buf)
}

public func FfiConverterTypeLCompoundPathElement_lower(_ value: LCompoundPathElement) -> RustBuffer {
    return FfiConverterTypeLCompoundPathElement.lower(value)
}

extension LCompoundPathElement: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum PathSimplifyMode {
    case none
    case polygon
    case spline
}

public struct FfiConverterTypePathSimplifyMode: FfiConverterRustBuffer {
    typealias SwiftType = PathSimplifyMode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PathSimplifyMode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .none

        case 2: return .polygon

        case 3: return .spline

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PathSimplifyMode, into buf: inout [UInt8]) {
        switch value {
        case .none:
            writeInt(&buf, Int32(1))

        case .polygon:
            writeInt(&buf, Int32(2))

        case .spline:
            writeInt(&buf, Int32(3))
        }
    }
}

public func FfiConverterTypePathSimplifyMode_lift(_ buf: RustBuffer) throws -> PathSimplifyMode {
    return try FfiConverterTypePathSimplifyMode.lift(buf)
}

public func FfiConverterTypePathSimplifyMode_lower(_ value: PathSimplifyMode) -> RustBuffer {
    return FfiConverterTypePathSimplifyMode.lower(value)
}

extension PathSimplifyMode: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Preset {
    case bw
    case poster
    case photo
}

public struct FfiConverterTypePreset: FfiConverterRustBuffer {
    typealias SwiftType = Preset

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Preset {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .bw

        case 2: return .poster

        case 3: return .photo

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Preset, into buf: inout [UInt8]) {
        switch value {
        case .bw:
            writeInt(&buf, Int32(1))

        case .poster:
            writeInt(&buf, Int32(2))

        case .photo:
            writeInt(&buf, Int32(3))
        }
    }
}

public func FfiConverterTypePreset_lift(_ buf: RustBuffer) throws -> Preset {
    return try FfiConverterTypePreset.lift(buf)
}

public func FfiConverterTypePreset_lower(_ value: Preset) -> RustBuffer {
    return FfiConverterTypePreset.lower(value)
}

extension Preset: Equatable, Hashable {}

public enum SvgError {
    case ConversionError(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeSvgError.lift(error)
    }
}

public struct FfiConverterTypeSvgError: FfiConverterRustBuffer {
    typealias SwiftType = SvgError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SvgError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .ConversionError(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SvgError, into buf: inout [UInt8]) {
        switch value {
        case .ConversionError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        }
    }
}

extension SvgError: Equatable, Hashable {}

extension SvgError: Error {}

private struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceTypeLSvgPath: FfiConverterRustBuffer {
    typealias SwiftType = [LSvgPath]

    public static func write(_ value: [LSvgPath], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLSvgPath.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [LSvgPath] {
        let len: Int32 = try readInt(&buf)
        var seq = [LSvgPath]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeLSvgPath.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypePointF64: FfiConverterRustBuffer {
    typealias SwiftType = [PointF64]

    public static func write(_ value: [PointF64], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePointF64.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PointF64] {
        let len: Int32 = try readInt(&buf)
        var seq = [PointF64]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypePointF64.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypePointI32: FfiConverterRustBuffer {
    typealias SwiftType = [PointI32]

    public static func write(_ value: [PointI32], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePointI32.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PointI32] {
        let len: Int32 = try readInt(&buf)
        var seq = [PointI32]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypePointI32.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeLCompoundPathElement: FfiConverterRustBuffer {
    typealias SwiftType = [LCompoundPathElement]

    public static func write(_ value: [LCompoundPathElement], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLCompoundPathElement.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [LCompoundPathElement] {
        let len: Int32 = try readInt(&buf)
        var seq = [LCompoundPathElement]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeLCompoundPathElement.read(from: &buf))
        }
        return seq
    }
}

public func convertImageToSvg(config: Config, imageData: Data, width: UInt32, height: UInt32) throws -> LSvgFile {
    return try FfiConverterTypeLSvgFile.lift(
        rustCallWithError(FfiConverterTypeSvgError.lift) {
            uniffi_vtracer_fn_func_convert_image_to_svg(
                FfiConverterTypeConfig.lower(config),
                FfiConverterData.lower(imageData),
                FfiConverterUInt32.lower(width),
                FfiConverterUInt32.lower(height), $0
            )
        }
    )
}

public func convertImageToSvgWithPreset(preset: Preset, imageData: Data, width: UInt32, height: UInt32) throws -> LSvgFile {
    return try FfiConverterTypeLSvgFile.lift(
        rustCallWithError(FfiConverterTypeSvgError.lift) {
            uniffi_vtracer_fn_func_convert_image_to_svg_with_preset(
                FfiConverterTypePreset.lower(preset),
                FfiConverterData.lower(imageData),
                FfiConverterUInt32.lower(width),
                FfiConverterUInt32.lower(height), $0
            )
        }
    )
}

public func makeSvgString(svgFile: LSvgFile) -> String {
    return try! FfiConverterString.lift(
        try! rustCall {
            uniffi_vtracer_fn_func_make_svg_string(
                FfiConverterTypeLSvgFile.lower(svgFile), $0
            )
        }
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_vtracer_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_vtracer_checksum_func_convert_image_to_svg() != 1092 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vtracer_checksum_func_convert_image_to_svg_with_preset() != 55382 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vtracer_checksum_func_make_svg_string() != 9426 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
